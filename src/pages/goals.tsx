import { ReactElement, useState } from "react";
import Layout from "~/components/Layout";
// import NestedLayout from '../components/nested-layout';
import type { NextPageWithLayout } from "./_app";
import Head from "next/head";
import { useUser } from "@clerk/nextjs";
import { api } from "~/utils/api";
import SelfAccountabilityCard from "~/components/SelfAccountabilityCard";
import { classNames } from "~/utils/shared/functions";

const Dashboard: NextPageWithLayout = () => {
  const { user } = useUser();

  const [accountabilityType, setAccountabilityType] = useState<'WEEK' | 'QUARTER' | 'YEAR'>("YEAR");
  const [selectedDate, setSelectedDate] = useState(new Date());

  if (!user) {
    return <p>Loading user...</p>;
  }


  return (
    <>
      <Head>
        <title>{`Goals | ${
          user.publicMetadata["currentTeamName"] as string
        }`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="mx-auto max-w-7xl px-4 py-4 sm:px-6 lg:px-8">
        <div className="mx-auto max-w-2xl items-start gap-x-8 gap-y-8 lg:mx-0 lg:max-w-none ">
          <div className="rounded-lg bg-gray-50 px-4 py-8 shadow-sm ring-1 ring-gray-900/5 sm:mx-0 sm:px-8 sm:pb-8 xl:px-8 xl:pb-6 xl:pt-8">
            <Tabs setAccountabilityType={setAccountabilityType} />
            <div className="mt-9 px-4">
              <SelfAccountabilityCard
                teamId={user.publicMetadata["currentTeamId"] as string}
                userId={user.id}
                date={selectedDate}
                type={accountabilityType}
                setSelectedDate={setSelectedDate}
              />
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

Dashboard.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export default Dashboard;

type Tab = {
  name: string;
  type: "WEEK" | "QUARTER" | "YEAR";
  current: boolean;
};

const tabs: Tab[] = [
  { name: "Weekly", type: "WEEK", current: false },
  { name: "Quarterly", type: "QUARTER", current: false },
  { name: "Yearly", type: "YEAR", current: true },
];

function Tabs({
  setAccountabilityType,
}: {
  setAccountabilityType: (value: "WEEK" | "QUARTER" | "YEAR") => void;
}) {
  const [selected, setSelected] = useState(2);

  const handleTabClick = (type: "WEEK" | "QUARTER" | "YEAR", index: number) => {
    setAccountabilityType(type);
    setSelected(index);
  };

  return (
    <div className="flex justify-center pb-2 sm:block">
      <div className="sm:block">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex " aria-label="Tabs">
            {tabs.map((tab) => (
              <div
                key={tab.name}
                className={classNames(
                  selected === tabs.indexOf(tab)
                    ? "border-sky-500 text-sky-600"
                    : "border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700",
                  "whitespace-nowrap border-b-2 px-8 py-4 text-sm font-medium"
                )}
                aria-current={tab.current ? "page" : undefined}
                onClick={() => handleTabClick(tab.type, tabs.indexOf(tab))}
              >
                {tab.name}
              </div>
            ))}
          </nav>
        </div>
      </div>
    </div>
  );
}
